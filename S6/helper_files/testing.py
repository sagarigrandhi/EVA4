# -*- coding: utf-8 -*-
"""testing.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ROfLaPseck-Sp6h3Yk3x63UVcmmNKrqZ
"""

import torch
import torch.nn.functional as F

def test(model, device, test_loader, test_losses, test_accuracies, misclassified, misclassified_num=25):
  '''
  Function to test the defined model on the test set.

  :param model: (class), defined CNN model
  :param device: (class), either CUDA or CPU
  :param test_loader: (class), dataloader for the test data
  :param test_losses: (list), list of losses accumulated per epoch during testing
  :param test_accuracies: (list), list of accuracies accumulated per epoch during testing
  :param misclassified_num: (int), threshold for the number of misclassified images
  '''
  model.eval()
  test_loss = 0.0
  correct = 0

  with torch.no_grad():
      for data, target in test_loader:
          # Get samples
          data, target = data.to(device), target.to(device)
          
          # Forward pass
          output = model(data)
          # Calculate loss
          test_loss += F.nll_loss(output, target, reduction='sum').item()  # sum up batch loss
          # Predict
          pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability
          correct += pred.eq(target.view_as(pred)).sum().item()
          
          # Get misclassified images
          if len(misclassified) < misclassified_num:
            for idx in range(data.shape[0]):
              if pred[idx] != target[idx]:
                misclassified.append([data[idx], pred[idx], target[idx]])
                if len(misclassified) == misclassified_num:
                  break

  print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\n'.format(
      test_loss, correct, len(test_loader.dataset),
      100. * correct / len(test_loader.dataset)))

  # Test loss and accuracy
  test_losses.append(test_loss/len(test_loader.dataset))  
  test_accuracies.append(100. * correct / len(test_loader.dataset))