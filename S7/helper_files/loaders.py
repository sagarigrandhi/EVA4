# -*- coding: utf-8 -*-
"""loaders.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fs3fjhoFYuxHqpmhsVlD3xoOlO6R1e8f
"""

# Imports
import torch
from torchvision import datasets, transforms
from torch.utils.data import DataLoader

def generate_train_test_loader(degrees = 7.0, 
                               fill = None, 
                               cifar10_mean = (0.4914, 0.48216, 0.44653), 
                               cifar10_std = (0.24703, 0.24349, 0.26159), 
                               SEED = 1, 
                               num_workers = 2, 
                               bs = 64, 
                               cuda_bs = 128):
  '''
  Function to download the dataset, apply tranformations, train/test split and 
  generate train/test dataloader.
  
  :param degrees: (int or float), degrees for rotation as (-degrees, degrees)
  :param fill: (tuple), fill color for the outside part of the transform
  :param cifar10_mean: (tuple), mean for each channel of the input image
  :param cifar10_std: (tuple), standard deviation for each channel of the input image
  :param SEED: (int), seed for generating random numbers
  :param num_workers: (int), number of subprocesses for data loading 
  :bs: (int), batch size 
  :cuda_bs: (int), batch size if cuda is available
  
  :returns: (tuple), datasets and dataloaders for the training and test set
  '''
  # Train and test phase transformations
  train_transforms = transforms.Compose([
                                         transforms.RandomRotation(degrees),
                                         transforms.RandomHorizontalFlip(),
                                         transforms.ToTensor(),
                                         transforms.Normalize(cifar10_mean, 
                                                              cifar10_std)
                                         ])
  test_transforms = transforms.Compose([
                                transforms.ToTensor(),
                                transforms.Normalize(cifar10_mean, cifar10_std)
                                ])
  # Dataset download and creating train/test split
  train = datasets.CIFAR10(root = './data', 
                           train = True,
                           download = True, 
                           transform = train_transforms)
  test = datasets.CIFAR10(root='./data',
                          train = False,
                          download = True, 
                          transform = test_transforms)
  # CUDA?
  cuda = torch.cuda.is_available()

  # For reproducibility
  torch.manual_seed(SEED)

  if cuda:
    torch.cuda.manual_seed(SEED)
  
  # Dataloader arguments - something you'll fetch from cmdprmt
  dataloader_args = dict(shuffle = True, 
                         batch_size = cuda_bs, 
                         num_workers = num_workers, 
                         pin_memory = True) if cuda else dict(shuffle = True, 
                                                              batch_size = bs)

  # Train dataloader
  train_loader = DataLoader(train, **dataloader_args)

  # Test dataloader
  test_loader = DataLoader(test, **dataloader_args)

  return train, test, train_loader, test_loader